Zhecheng Sheng and zs68

Run WordGramDiver for wordgrams of size 2-10 and record
the number of WordGram values/objects that occur more than
once as reported by the runs. For example, with WSIZE = 2,
which generates 2-grams, the output of benchmark and benchmarkShift
each indicates that the total # wordgrams generated is 177,634
and that the # unique wordgrams is 117,181

This means there are 177,634 - 117,181 = 60,453 WordGram values that
occur more than once. Find these same values for other orders
of k and complete the table below for different k-grams/different 
values of WSIZE

WSIZE    # duplicates
2        60,453
3        10,756
4        1,987
5	  667
6	  362
7	  226
8	  151
9	  105
10	  73

=====
Explain in your own words the conceptual differences between 
the benchmark and benchmarkShift methods. 
Answer these questions: 

(1) Why the results of these methods should be the same in 
terms of changes made to the HashSet parameter.
Answer: Because benchmark reads the adjacent words in these files and benchmarkShift reads the first word in the file and repeatedly call .shift() method which is exactly the next adjacent word in the file, so the output is the same.

(2) What are the conceptual differences between the two
benchmarking methods
Answer: benchmark method read in the whole data at once and do a linear grabbing on the sequence of data, while benchmarkShift method read one word from the file each time and save the word to the set.

(3) Is the total amount of memory allocated for arrays
the same or different in the two methods? Account for
arrays created in the methods and arrays created by
WordGram objects. Try to be quantitative in answering.
Answer: Suppose the length of the words in files is k, 
For benchmark method, 
We need a k space arraylist and a k space string array.
K- wsize + 1 wordgram objects of size wsize. (Each wordgram object contains an array of size wsize)

For benchmarkShift method,
We need a wsize space string array 
Since each time .shiftadd is called, we create a new wordgram object, we need k - wsize + 1 wordgram objects of size wsize (Each wordgram object contains an array of size wsize).


So based on the result, the memory allocated for benchmarkShift method is less than that of benchmark method.


